# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # Repositories

    # book repository
    AppBundle\Repository\BookRepository:
        class: AppBundle\Repository\BookRepository
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
          - AppBundle\Entity\Book

    # review repository
    AppBundle\Repository\ReviewRepository:
            class: AppBundle\Repository\ReviewRepository
            factory: ['@doctrine.orm.default_entity_manager', getRepository]
            arguments:
              - AppBundle\Entity\Review

    # book repository
    AppBundle\Repository\UserRepository:
            class: AppBundle\Repository\UserRepository
            factory: ['@doctrine.orm.default_entity_manager', getRepository]
            arguments:
              - AppBundle\Entity\User

    # author repository
    AppBundle\Repository\AuthorRepository:
      class: AppBundle\Repository\AuthorRepository
      factory: ['@doctrine.orm.default_entity_manager', getRepository]
      arguments:
          - AppBundle\Entity\Author

    # Custom Services

    # book service
    AppBundle\Service\BookService:
        class: AppBundle\Service\BookService
        arguments: ['@AppBundle\Repository\BookRepository',
                    '@doctrine.orm.entity_manager',
                    '@AppBundle\Service\PaginationService',
                    '@security.token_storage',
                    '@AppBundle\Service\ReviewService']

    # review service
    AppBundle\Service\ReviewService:
        class: AppBundle\Service\ReviewService
        arguments: ['@AppBundle\Repository\ReviewRepository', '@doctrine.orm.entity_manager']

    # user service
    AppBundle\Service\UserService:
        class: AppBundle\Service\UserService
        arguments: ['@AppBundle\Repository\UserRepository',
                    '@doctrine.orm.entity_manager',
                    '@AppBundle\Service\PaginationService',
                    '@AppBundle\Service\BookService']

    # pagination service
    AppBundle\Service\PaginationService:
        class: AppBundle\Service\PaginationService
        arguments: ['@knp_paginator', '@request_stack']

    AppBundle\Service\AuthorService:
          class: AppBundle\Service\AuthorService
          arguments: ['@AppBundle\Repository\AuthorRepository',
                      '@doctrine.orm.entity_manager',
                      '@AppBundle\Service\PaginationService']


    # Event Listeners

    # page exception listener
    AppBundle\EventListener\PageExceptionSubscriber:
          class: AppBundle\EventListener\PageExceptionSubscriber
          arguments: ['@router']
          tags:
            - { name: kernel.event_subscriber }